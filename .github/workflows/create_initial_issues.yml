name: Create Initial Issues

on:
  workflow_dispatch:

permissions:
  issues: write        # Required to create and manage issues
  contents: read       # Required to read repository content

jobs:
  create_issues:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}     # Personal Access Token stored as a secret in your repository
      REPOSITORY: ${{ github.repository }}   # Repository name (e.g., 'user/repo')
      PROJECT_NUMBER: 4                      # Replace with your project's number (you can find this in the project URL)

    steps:
      - name: Create issues in project
        run: |
          # GitHub API GraphQL query to get classic project by number
          query='
          {
            repository(owner: "${{ github.repository_owner }}", name: "${REPOSITORY##*/}") {
              projects(first: 100) {
                nodes {
                  number
                  name
                  id
                  columns(first: 100) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            }
          }
          '

          # Use curl to make the GraphQL API request
          response=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d "{\"query\": \"$query\"}" https://api.github.com/graphql)

          echo "Response: $response"

          # Extract the project and column IDs from the response
          project=$(echo "$response" | jq -r ".data.repository.projects.nodes[] | select(.number == $PROJECT_NUMBER)")

          if [ -z "$project" ]; then
            echo "Error: Project not found!"
            exit 1
          fi

          project_id=$(echo "$project" | jq -r '.id')
          columns=$(echo "$project" | jq -r '.columns.nodes[] | {name, id}')

          echo "Project ID: $project_id"
          echo "Columns: $columns"

          # Define issues to create
          issues='[
          { title: "Implement service discovery with Eureka", labels: ["enhancement"], column: "In Progress" },
            { title: "Set up API Gateway using Spring Cloud Gateway", labels: ["enhancement"], column: "To Do" },
            { title: "Implement centralized configuration management with Spring Cloud Config", labels: ["enhancement"], column: "To Do" },
            { title: "Implement circuit breaker pattern using Resilience4j", labels: ["enhancement"], column: "To Do" },
            { title: "Set up distributed tracing with Spring Cloud Sleuth and Zipkin", labels: ["enhancement"], column: "To Do" },
            { title: "Implement event-driven architecture using Apache Kafka", labels: ["enhancement"], column: "To Do" },
            { title: "Implement OAuth2 and JWT for authentication and authorization", labels: ["enhancement"], column: "To Do" },
            { title: "Ensure each service has its own database", labels: ["enhancement"], column: "To Do" },
            { title: "Implement CRUD operations for Account Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement payment processing logic for Payment Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement double-entry bookkeeping system for Ledger Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement KYC checks for Counterparty Service", labels: ["enhancement"], column: "To Do" },
            { title: "Set up secure document storage for Document Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement invoice generation and management for Invoice Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement real-time exchange rate fetching for Foreign Exchange Service", labels: ["enhancement"], column: "To Do" },
            { title: "Set up event logging and tracking for Event Service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement real-time balance tracking for Balance Monitoring Service", labels: ["enhancement"], column: "To Do" },
            { title: "Set up CI/CD pipelines for automated testing and deployment", labels: ["enhancement"], column: "To Do" },
            { title: "Develop comprehensive test suites for each service", labels: ["enhancement"], column: "To Do" },
            { title: "Implement monitoring and alerting system", labels: ["enhancement"], column: "To Do" },
            { title: "Develop a go-to-market strategy", labels: ["business"], column: "Backlog" },
            { title: "Create a pitch deck for potential investors", labels: ["business"], column: "Backlog" },
            { title: "Conduct market research and competitor analysis", labels: ["business"], column: "Backlog" },
            { title: "Define pricing model and revenue streams", labels: ["business"], column: "Backlog" },
            { title: "Develop a customer acquisition strategy", labels: ["business"], column: "Backlog" },
            { title: "Create a product roadmap for the next 12 months", labels: ["business"], column: "Backlog" },
            { title: "Identify potential strategic partnerships", labels: ["business"], column: "Backlog" },
            { title: "Develop a scalability plan for infrastructure and operations", labels: ["business"], column: "Backlog" }
          ]'

          # Loop over each issue and create them, then move to the correct column
          for row in $(echo "${issues}" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            title=$(_jq '.title')
            labels=$(_jq '.labels')
            column=$(_jq '.column')

            # Create the issue
            issue_response=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${REPOSITORY}/issues \
              -d "{\"title\":\"$title\", \"labels\":$labels}")

            issue_id=$(echo "$issue_response" | jq -r '.id')

            if [ "$issue_id" == "null" ]; then
              echo "Error: Failed to create issue"
              exit 1
            fi

            echo "Created issue: $title with ID: $issue_id"

            # Move the issue to the correct column
            column_id=$(echo "$columns" | jq -r "select(.name == \"$column\") | .id")

            if [ -z "$column_id" ]; then
              echo "Error: Column '$column' not found!"
              exit 1
            fi

            card_response=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/projects/columns/$column_id/cards \
              -d "{\"content_id\": \"$issue_id\", \"content_type\": \"Issue\"}")

            if echo "$card_response" | jq -e 'has("id")' >/dev/null; then
              echo "Moved issue '$title' to column '$column'"
            else
              echo "Error: Failed to move issue '$title' to column '$column'"
              exit 1
            fi
          done
