name: Categorize Issues in Project

on:
  issues:
    types: [opened, reopened]

jobs:
  categorize_issue:
    runs-on: ubuntu-latest
    steps:
    - name: Get project data
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        ORGANIZATION: ${{ github.repository_owner }}
        PROJECT_NUMBER: 4
      run: |
        gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

    - name: Add issue to project
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        ISSUE_ID: ${{ github.event.issue.node_id }}
      run: |
        PROJECT_ID=$(jq '.data.organization.projectV2.id' project_data.json -r)
        
        gh api graphql -f query='
          mutation($project:ID!, $issue:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json
        
        ITEM_ID=$(jq '.data.addProjectV2ItemById.item.id' issue_data.json -r)
        
        STATUS_FIELD_ID=$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json -r)
        TODO_OPTION_ID=$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") | .id' project_data.json -r)
        
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
          ) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: { 
                singleSelectOptionId: $status_value
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID

    - name: Set labels based on issue labels
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        ISSUE_ID: ${{ github.event.issue.node_id }}
      run: |
        PROJECT_ID=$(jq '.data.organization.projectV2.id' project_data.json -r)
        ITEM_ID=$(jq '.data.addProjectV2ItemById.item.id' issue_data.json -r)
        
        LABELS_FIELD_ID=$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Labels") | .id' project_data.json -r)
        
        LABELS=$(jq -r '.labels[].name' <<< '${{ toJson(github.event.issue.labels) }}' | jq -R -s -c 'split("\n")[:-1]')
        
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $labels_field: ID!
            $labels: [String!]!
          ) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $labels_field
              value: { 
                multiSelectOptionIds: $labels
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f labels_field=$LABELS_FIELD_ID -f labels="$LABELS"

